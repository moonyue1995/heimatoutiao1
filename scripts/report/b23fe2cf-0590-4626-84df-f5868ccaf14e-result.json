{"name": "test_login", "status": "broken", "statusDetails": {"message": "TypeError: test_login() missing 4 required positional arguments: 'username', 'code', 'expect', and 'states'", "trace": "self = <unittest.case._Outcome object at 0x10c45f278>\ntest_case = <scripts.testDemo.TestLogin testMethod=test_login>, isTest = True\n\n    @contextlib.contextmanager\n    def testPartExecutor(self, test_case, isTest=False):\n        old_success = self.success\n        self.success = True\n        try:\n>           yield\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/case.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <scripts.testDemo.TestLogin testMethod=test_login>\nresult = <TestCaseFunction test_login>\n\n    def run(self, result=None):\n        orig_result = result\n        if result is None:\n            result = self.defaultTestResult()\n            startTestRun = getattr(result, 'startTestRun', None)\n            if startTestRun is not None:\n                startTestRun()\n    \n        result.startTest(self)\n    \n        testMethod = getattr(self, self._testMethodName)\n        if (getattr(self.__class__, \"__unittest_skip__\", False) or\n            getattr(testMethod, \"__unittest_skip__\", False)):\n            # If the class or method was skipped.\n            try:\n                skip_why = (getattr(self.__class__, '__unittest_skip_why__', '')\n                            or getattr(testMethod, '__unittest_skip_why__', ''))\n                self._addSkip(result, self, skip_why)\n            finally:\n                result.stopTest(self)\n            return\n        expecting_failure_method = getattr(testMethod,\n                                           \"__unittest_expecting_failure__\", False)\n        expecting_failure_class = getattr(self,\n                                          \"__unittest_expecting_failure__\", False)\n        expecting_failure = expecting_failure_class or expecting_failure_method\n        outcome = _Outcome(result)\n        try:\n            self._outcome = outcome\n    \n            with outcome.testPartExecutor(self):\n                self.setUp()\n            if outcome.success:\n                outcome.expecting_failure = expecting_failure\n                with outcome.testPartExecutor(self, isTest=True):\n>                   testMethod()\nE                   TypeError: test_login() missing 4 required positional arguments: 'username', 'code', 'expect', and 'states'\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/case.py:615: TypeError"}, "attachments": [{"name": "log", "source": "b6bf7f72-bba4-4cf7-82aa-dd93d88601c0-attachment.txt", "type": "text/plain"}], "start": 1636787742991, "stop": 1636787747388, "uuid": "5e77f5a9-fcad-495c-988e-b375973c6e5b", "historyId": "4e5759c471126ee42397ef5bb92194e5", "testCaseId": "c204ebbd5a774126af87a99d7e58d4f2", "fullName": "scripts.testDemo.TestLogin#test_login", "labels": [{"name": "parentSuite", "value": "scripts"}, {"name": "suite", "value": "testDemo"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "moon"}, {"name": "thread", "value": "24426-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "scripts.testDemo"}]}